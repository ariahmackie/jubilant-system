database transaction-a collection of SQL queries treated as one unit of work;
example of a database transation - account deposit (SELECT data, UPDATE new account, UPDATE old account);
transaction COMMIT - queries persist 
transaction ROLLBACK - undo queries of transaction
stages of transaction - begin, commit (possible rollback)
types of read phenomenon -dirty reads,

dirty reads - reading transaction that has not been committed yet;

dirty reads example- a transaction is made to get quantity * price but while you did that another transaction that was not committed changed the quantity. 
non-repeatable reads - 
non-repeatable reads example - transaction 1 seeks quantity * price for every row. A second transaction updates a row and commits before transaction 1 finishes.Now transaction 1 only applies to an old version of the table.
phantom reads - things you can't really read because they don't exist yet
phantom reads example - transaction 1 asks for quantity * price. Transaction2 inserts a new row and commits it. transaction 1 then fnishes by taking the sum of (quanity * price) ..now the new row is included where it wasn't in the first quarter;

lost updates example -two transactions are in parallel. Transaction 1 updates a quantity. Transaction 2 updates the same quanitty. Both transactions are only looking at the original transaction so one transaction update is lost and the other wins.
isolation levels for inflight transactions- read uncommitted (bad), read committed 
level : read uncomitted - no isolation, any change fromthe outside is visible to the transaction, commited or not (most databases don't allow this)
level : read commited - each query in a transaction only sees committed changes by other transactions, default isolation.
level: repeatable read - the transaction will maks ure thwhen a query reads a row, that row will remain unchanged while the transacion is running;
level: snapshot - each query in a transaction only sees changes that have been committed up to the start of the transaction. its like a sapchot version of the database at that moment (this gets rid of all read phenomonon)
level: serializable - transactions are run as if they are serialized on after the other (slow). no transactions in parpalele
each database management system implements isolation levels differently. These problems occur when a lot of users are making changes at the same time.
serializable and snapshot both prevent all read phonemena.

pessimistic database implementation -  row level locks, table locks, page locks to avoid lost updates
optimistic database implementation - no locks, jsut track if things change and fail the transaction if so
downside of lockng -expensive;
how do you inforce consistency in data - atomicity, referential integrity (foreign keys), isolation

there is a wiki table that shows whih read phenomena vs isolation levels that is a good guide.
durability - the power can be shut down right now and i will not lose any of my commits;

consistency example-
atomicity -all queries in a transaction must succeed. If one query fails, all prior successful queries in the transaction should rollback. if database crashes during a transaction all successful queries in the transactions should rollback;
isolation -

consistency -consistency in data (what is on disk), consistency in reads
durability -changes made by committed transactions must be persisted in a durable non-volatile storage

durability techniques - WAL (Write ahead log), asynchronous snapshot, AOF
WAL (write ahead log) -compressed version of database changes

writing a lof of data to disk is expensive.
Asynchronous snapshot -
AOF - 
some transactions are read only. some change data
some databases write immediately to disk (slow) and some write to memory. it is a trade off.
your database should clean up sucessful queries in a crashed transaction. rollback ALL changes;
isolation main question: can my inflight transaction see changes made by other transactions?
queries need to be bounded!

OS cache - a write request in an OS goes to the OS cache. these writes are batched so they can be committed to disk all at once

what can happens becuse of OS cache to a database write if the OS crashes - you might have a loss of data;

Fsync OS command - forces all commites to be written to disk
